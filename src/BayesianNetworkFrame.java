

import processing.core.PApplet;

import javax.script.*;

import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;
import org.rosuda.REngine.*;



/**
 *
 * @author shen
 */
public class BayesianNetworkFrame extends javax.swing.JFrame {

    /**
     * Creates new form BayesianNetworkFrame
     */
    public static String WorkDirectory = "";
    public static String FilePath = "";
    public static String dataFileName = "";
    public static String ConvertedDataFileName = "out.csv";
    public static String BaysianNetworkFile = "arcs.csv";
    public static String BaysianNetworkUpdatedFile = "arcsUpdate.csv";
    public static java.util.ArrayList matrix = new java.util.ArrayList(); 

	public static int[][] adjacentMatrix;
    public static Network bn = new Network();
    public static int attrCount = 0;
    public static String[] attrNames;
    
    public static String[][] tblVariables;
    public static String[] fromList;
    public static String[] toList;
    public static java.util.ArrayList configs;
    public static java.util.ArrayList configRates;
    public static java.util.ArrayList initConcentrations;
    
    public static double[] f;
    public static double[] rateChanges;
    
    public BayesianNetworkFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        btnFileBrowse = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnDataLoad = new javax.swing.JButton();
        btnDataSave = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnModelTrain = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btnConnectionSave = new javax.swing.JButton();
        btnPlot = new javax.swing.JButton();
        jBtnSim = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblRate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTblVariables = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("File");

        txtFilePath.setText("DataFilePath");

        btnFileBrowse.setText("Browse");
        btnFileBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(btnFileBrowse))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFileBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Data");

        btnDataLoad.setText("(Re)Load");
        btnDataLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataLoadActionPerformed(evt);
            }
        });

        btnDataSave.setText("Save");
        btnDataSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(btnDataLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDataSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDataLoad)
                        .addComponent(btnDataSave))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Model");

        btnModelTrain.setText("Model Training and Data Processing");
        btnModelTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelTrainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModelTrain)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnModelTrain))
                .addGap(6, 6, 6))
        );

        jLabel4.setText("Plot");

        btnConnectionSave.setText("Save");
        btnConnectionSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectionSaveActionPerformed(evt);
            }
        });

        btnPlot.setText("Plot");
        btnPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlotActionPerformed(evt);
            }
        });

        jBtnSim.setText("Simulation");
        jBtnSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(26, 26, 26)
                .addComponent(btnPlot)
                .addGap(30, 30, 30)
                .addComponent(btnConnectionSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnSim)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnConnectionSave)
                    .addComponent(btnPlot)
                    .addComponent(jBtnSim))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblRate.setText("Concentration Rage Changes");

        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        jTblVariables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTblVariables);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(lblRate, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(lblRate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void btnDataSaveActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    	try{
    		
    		if(!new java.io.File(this.WorkDirectory+"/"+this.dataFileName).exists() || matrix.size() <1){
        		javax.swing.JOptionPane.showMessageDialog(null, "Please Load a data file.", "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        	}
    		java.io.BufferedWriter output = new java.io.BufferedWriter(new java.io.FileWriter(this.WorkDirectory +"/"+this.ConvertedDataFileName));
    		Node data = (Node) matrix.get(0);
    		String[] dataAttributes = data.getAttributes();
			double[] dataValues = data.getValues();
			for(int i = 0; i < dataAttributes.length-1;i++){
				
				output.write(dataAttributes[i]+",");
				output.flush();
			}
			output.write(dataAttributes[dataAttributes.length-1]+"");
			output.flush();
			output.write("\n");
			output.flush();
    		for(int i = 0; i < matrix.size(); i++){
    			data = (Node)matrix.get(i);
    			if(!data.getDelete()){
	        		dataValues = data.getValues();
	    			
	    			for(int  j = 0; j < dataValues.length-1; j++){
	    				output.write(dataValues[j]+",");
	    				output.flush();    				
	    			}
	    			output.write(dataValues[dataValues.length-1]+"");
					output.flush();  
	    			output.write("\n");   			
	    			output.flush();
    			}
    		}
    		output.close();
    		javax.swing.JOptionPane.showMessageDialog(null, "The data is saved at "+this.WorkDirectory+"/"+this.ConvertedDataFileName, "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
	    	
    	}   
    	catch(java.io.IOException ioe){
    		
    		System.out.println(ioe.getMessage());
    	}
    }                                           

    private void btnPlotActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    		
    	if(!new java.io.File(this.WorkDirectory+"/"+this.BaysianNetworkFile).isFile()){
    		javax.swing.JOptionPane.showMessageDialog(null, "Please Train a model first.", "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    	}
    	else
    		processing.core.PApplet.main(new String[]{"BayesianNetworkSketch"});
	
    }                                       

    private void btnConnectionSaveActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    	if(this.adjacentMatrix==null){
    		javax.swing.JOptionPane.showMessageDialog(null, "Please Edit the BayesianNetwork first.", "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    	}
    	else{
	    	java.io.BufferedWriter output = null;
	    	try{
	    		
	    		// create bayesian network file
	    		output = new java.io.BufferedWriter(new java.io.FileWriter(new java.io.File(this.WorkDirectory+"/"+this.BaysianNetworkUpdatedFile)));
	    		output.write(",From,To"+"\n");
	    		
	    		int count = 0;
	    		java.util.ArrayList nodes = new java.util.ArrayList();
	    	
		    	for(int i = 0; i < attrCount; i++){
		    		
		    		for(int j = 0; j < attrCount; j++){
		    			
		    			if(adjacentMatrix[i][j]==1){
		    				count++;
		    				if(!nodes.contains(attrNames[i]))
		    					nodes.add(attrNames[i]);
		    				if(!nodes.contains(attrNames[j]))
			    				nodes.add(attrNames[j]);
		    				output.write(count+","+attrNames[i]+","+attrNames[j]+"\n");
		    				output.flush();
		    			}
		    		}
		    	}
		    	
		    	output.close();
		    	
		    	// initialize variable table
		    	String[][] tblVariables = new String[nodes.size()+count+7][nodes.size()+count+5];
		    	int i = 0;
		    	int aNodeValue = 10;
		    	for(i = 0; i < nodes.size(); i++){
		    		tblVariables[i][0] = nodes.get(i).toString();
		    		tblVariables[i][1] = ""+aNodeValue*(i+1);
		    	}
		    	int edgeCount = 1;
		    	for(int m = 0; m < attrCount;m++){
		    		for(int n = 0; n < attrCount ; n++){
		    			if(adjacentMatrix[m][n]==1){
		    				tblVariables[i][0]= "P"+edgeCount+"(P"+edgeCount+"+RNAP+"+attrNames[m]+"->"+attrNames[n]+")";		
		    				tblVariables[i][1]= "10.0";	
		    				edgeCount++;
		    				i++;
		    			}		    			
		    		}
		    	}

		    	tblVariables[i][0] = "RNAP";
		    	tblVariables[i][1] = "30";
		    	i++;
		    	tblVariables[i][0] = "kd";
		    	tblVariables[i][1] = "0.0075";
		    	i++;
		    	tblVariables[i][0] = "Kr";
		    	tblVariables[i][1] = "0.25";
		    	i++;
		    	tblVariables[i][0] = "K0";
		    	tblVariables[i][1] = "0.033";
		    	i++;
		    	tblVariables[i][0] = "k0";
		    	tblVariables[i][1] = "0.05";
		    	i++;
		    	tblVariables[i][0] = "np";
		    	tblVariables[i][1] = "10";
		    	i++;
		    	tblVariables[i][0] = "nc";
		    	tblVariables[i][1] = "2";
		    	i++;
		    	
		    	String[] tblColumns = {"Name","Value"};
		    	
		    	jTblVariables.setModel(new javax.swing.table.DefaultTableModel(
		                tblVariables,
		                new String [] {
		                    "Name", "Value"
		                }
		            ) {
		                boolean[] canEdit = new boolean [] {
		                    false, true
		                };

		                public boolean isCellEditable(int rowIndex, int columnIndex) {
		                    return canEdit [columnIndex];
		                }
		            });		    	
		    	
		    	javax.swing.JOptionPane.showMessageDialog(null, "The BayesianNetwork is saved at "+this.WorkDirectory+"/"+this.BaysianNetworkUpdatedFile, "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
		    	
		    	
	    	}
	    	catch(java.io.IOException ioe){
	    		
	    		System.out.println(ioe.getMessage());
	    	}
    	}
    	
    	
    	
    }
    
    private void jBtnSimActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    	
    	simulationODE();
    	
    	processing.core.PApplet.main(new String[]{"BayesianNetworkSimulation"});
    }
    
    private void simulationODE(){
    	//String[][] tblVariables = new String[jTblVariables.getRowCount()][2];
    	tblVariables = new String[jTblVariables.getRowCount()][2];
    	for(int i = 0; i < jTblVariables.getRowCount(); i++){
    		if(jTblVariables.getModel().getValueAt(i,0)!= null && !jTblVariables.getModel().getValueAt(i,1).equals("") ){
	    		tblVariables[i][0]= jTblVariables.getModel().getValueAt(i,0).toString();
	    		tblVariables[i][1]= jTblVariables.getModel().getValueAt(i,1).toString();
    		}
    	}
    	double RNAP = 0.0;
    	double Kd = 0.0;
    	double Kr = 0.0;
    	double K0 = 0.0;
    	double k0 = 0.0;
    	double nc = 0.0;
    	double np = 0.0;
    	for(int i = 0; i < tblVariables.length; i++){
    		if(tblVariables[i][0]!= null){
    		if(tblVariables[i][0].equals("RNAP"))
    			RNAP = Double.parseDouble(tblVariables[i][1]);
    		else if(tblVariables[i][0].equals("kd"))
        			Kd = Double.parseDouble(tblVariables[i][1]);
    		else if(tblVariables[i][0].equals("Kr"))
    			Kr = Double.parseDouble(tblVariables[i][1]);
    		else if(tblVariables[i][0].equals("K0"))
    			K0 = Double.parseDouble(tblVariables[i][1]);
    		else if(tblVariables[i][0].equals("k0"))
    			k0 = Double.parseDouble(tblVariables[i][1]);
    		else if(tblVariables[i][0].equals("nc"))
    			nc = Double.parseDouble(tblVariables[i][1]);
    		else if(tblVariables[i][0].equals("np"))
    			np = Double.parseDouble(tblVariables[i][1]);
    		}
    	}
    	
    	configs = new java.util.ArrayList();
    	configRates = new java.util.ArrayList();
    	for(int i = 0; i < tblVariables.length; i++){
    		if(tblVariables[i][0]!= null && tblVariables[i][0].contains("(")){
    			configs.add(tblVariables[i][0]) ;
    			configRates.add( tblVariables[i][1]);
    		}
    	}
    	
    	f = new double[configs.size()];
    	
    	double fromSpecies = 0.0;
    	//java.util.ArrayList initConcentrations = new java.util.ArrayList();
    	initConcentrations = new java.util.ArrayList();
    	//String[] fromList = new String[configs.size()];
    	fromList = new String[configs.size()];
    	//String[] toList = new String[configs.size()];
    	toList = new String[configs.size()];
    	
    	for(int i = 0; i < configs.size(); i++){
    		
    		String p = configs.get(i).toString();
    		String s1 = p.split("->")[0];
    		String s2 = p.split("->")[1];
    		String[] s1Array = s1.split("\\+");
    		s1 = s1Array[s1Array.length-1];
    		s2 = s2.substring(0, s2.length()-1);
    		fromList[i] = s1;
    		toList[i] = s2;
    		
    		for(int j =0; j < tblVariables.length; j++){
    			if(tblVariables[j][0]!= null && tblVariables[j][0].equals(s1)){
    				fromSpecies = Double.parseDouble(tblVariables[j][1]);
    				initConcentrations.add(fromSpecies);
    			}    			
    		}    		
    		f[i] = k0 * K0 * RNAP * Double.parseDouble( configRates.get(i).toString()) /(1+ K0 * RNAP  + Kr * java.lang.Math.pow(fromSpecies,nc));
    		
    	}
    	
    	rateChanges = new double[configs.size()];
    	
    	txtResult.append("---------------Result---------------\n");
    	
    	for(int j = 0; j < toList.length; j++){
      		// get species concentration
      		double sRate = 0.0;
      		for(int m = 0; m < tblVariables.length; m++){
      			if(tblVariables[m][0]!= null && tblVariables[m][0].equals(toList[j])){
      				sRate = Double.parseDouble( tblVariables[m][1] );
      			}
      		}
      		rateChanges[j] = np * f[j] - Kd * sRate;    		
    	}
    	
    	for(int i = 0 ; i < toList.length; i++){    		
    		
    		System.out.println("Rate Change: "+toList[i]+" = "+rateChanges[i]);  
    		txtResult.append("Rate Change: "+toList[i]+" = "+rateChanges[i]+"\n");
    		
    	}
    	
    }


    private void btnLearnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }       
                                     

    private void btnFileBrowseActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(BayesianNetworkFrame.this);
 
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                java.io.File file = fc.getSelectedFile();               
                this.FilePath = file.getAbsolutePath();
                this.dataFileName = file.getName();
                this.WorkDirectory = file.getParent();
                this.txtFilePath.setText(this.FilePath);
            } 
    }                                             

    private void btnDataLoadActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        java.io.BufferedReader input ;
        
        try{
        
        	if(!new java.io.File(this.WorkDirectory+"/"+this.dataFileName).isFile()){
        		javax.swing.JOptionPane.showMessageDialog(null, "Please Choose a data file.", "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        	}
        	
        	
            input = new java.io.BufferedReader(new java.io.FileReader(this.WorkDirectory +"/"+ this.dataFileName));
            
            String inLine = input.readLine();
            inLine = inLine.trim();
            inLine = inLine.replace("\"", "");
            String[] attributeNames = inLine.split(",");
            this.attrCount = attributeNames.length;
            this.attrNames = attributeNames;
           
            inLine = input.readLine();
            while(inLine != null && inLine.length() >0){
            	 Node data = new Node();
                 data.addAttributes(attributeNames);
                String[] values = inLine.split(",");
                double[] dataValues = new double[data.getNumAttributes()];
                for(int i = 0; i < dataValues.length; i++){                
                    dataValues[i] = Double.parseDouble(values[i]);
                }
                data.addValues(dataValues);
                this.matrix.add(data);
                inLine = input.readLine();
            }
        	
        	processing.core.PApplet.main(new String[]{"BayesianNetworkData"});
        }
        catch(java.io.IOException ioe){
        
            System.out.println(ioe.getMessage());
        }
        
    }         
    
    private void btnModelTrainActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    	// use R bayesian network to build a bayesian network model
    	
    	
    	RConnection connection = null;
    	 
        try {
            /* Create a connection to Rserve instance running
             * on default port 6311
             */
            connection = new RConnection();
            

            connection.eval("library(\"bnlearn\")");
            
            String vector = "c(1,2,3,4)";
            connection.eval("meanVal=mean(" + vector + ")");
            double mean = connection.eval("meanVal").asDouble();
            System.out.println("The mean of given vector is=" + mean);

            connection.eval("setwd('"+this.WorkDirectory+"')");
            
            String inputFile = "";
            if(new java.io.File(this.WorkDirectory+"/"+this.ConvertedDataFileName).exists()){
            	inputFile = this.ConvertedDataFileName;
            }
            else{
            	inputFile = this.dataFileName;
            }
            
            REXP rResponseObject = connection.parseAndEval("try(eval("+"res <- hc(data.frame(read.csv('"+inputFile+"')))"+"),silent=TRUE)"); 
            
            if (rResponseObject.inherits("try-error")) { System.out.println("R Serve Eval Exception : "+rResponseObject.asString()); }
            //REXP rResponseObject = connection.parseAndEval("res <- hc(data.frame(read.csv('"+this.FilePath+"')))"); 
            System.out.println("pass test="+rResponseObject.getClass().getName());
            connection.eval("arcs <- res$arcs");            
            connection.eval("write.csv(arcs, file='"+this.BaysianNetworkFile+"')");
            
            javax.swing.JOptionPane.showMessageDialog(null, "Bayesian Network Model is created.", "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
   
            
        } catch (RserveException e) {
        	javax.swing.JOptionPane.showMessageDialog(null, "Please connect to R Engine and build the model again.\n library(bnlearn) \n library(rserve) \n Rserve(args=\"--no-save\") \n", "InfoBox: " + "Bayesian Network Frame", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    	
            e.printStackTrace();
        } catch (REXPMismatchException e) {
            e.printStackTrace();
        }catch(REngineException e){
        	e.printStackTrace();
        }finally{
            connection.close();
        }
	    
    	
    	
    } 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        * Create and display the form *
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BayesianNetworkFrame().setVisible(true);
            }
        });*/
    	
    	try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BayesianNetworkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BayesianNetworkFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify   
    private javax.swing.JButton btnConnectionSave;
    private javax.swing.JButton btnDataLoad;
    private javax.swing.JButton btnDataSave;
    private javax.swing.JButton btnFileBrowse;
    private javax.swing.JButton btnModelTrain;
    private javax.swing.JButton btnPlot;
    private javax.swing.JButton jBtnSim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTblVariables;
    private javax.swing.JLabel lblRate;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration                   
}


